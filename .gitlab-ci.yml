stages:
  - search-pod
  - collect-data

variables:
  INSTANCE_NAME: "adham05"

namespaces:
  # List of namespaces and their associated runners
  - { name: "cache-test", runner: "cache-utility-test" }
  - { name: "cache-prod", runner: "cache-utility-edco" }
  - { name: "tp2-edco-prod-a", runner: "tp2-edco-prod-a" }
  - { name: "tp2-edco-prod-b", runner: "tp2-edco-prod-b" }

# Dynamically generate search jobs for each namespace
search_pods:
  stage: search-pod
  script:
    - |
      echo "Searching for pods matching $INSTANCE_NAME in $NAMESPACE namespace"

      kubectl get pods -n $NAMESPACE | grep $INSTANCE_NAME | grep -E 'server-0|server-1|server-2' > found_pods_$NAMESPACE.txt || true

      if [[ -s found_pods_$NAMESPACE.txt ]]; then
        echo "Pods found in $NAMESPACE:"
        cat found_pods_$NAMESPACE.txt
      else
        echo "No pods found in $NAMESPACE"
      fi
  tags:
    - $RUNNER
  artifacts:
    paths:
      - found_pods_$NAMESPACE.txt
    when: always
  except:
    - pushes
    - merge_requests
  variables:
    NAMESPACE: "${name}"
    RUNNER: "${runner}"
  parallel:
    matrix:
      - name: "cache-test"
        runner: "cache-utility-test"
      - name: "cache-prod"
        runner: "cache-utility-edco"
      - name: "tp2-edco-prod-a"
        runner: "tp2-edco-prod-a"
      - name: "tp2-edco-prod-b"
        runner: "tp2-edco-prod-b"

# Collect data for found pods
collect_data:
  stage: collect-data
  needs:
    - job: search_pods
      artifacts: true
  script:
    - |
      for FILE in found_pods_*.txt; do
        NAMESPACE=$(echo $FILE | cut -d'_' -f3 | cut -d'.' -f1)
        if [[ -s $FILE ]]; then
          while read -r POD_NAME; do
            echo "Collecting data for $POD_NAME in $NAMESPACE"
            # Fetch ConfigMap details
            kubectl get configmap -n $NAMESPACE -o yaml > "${NAMESPACE}_configmap.yaml" || true
            # Fetch StatefulSet details
            kubectl get sts -n $NAMESPACE -o yaml > "${NAMESPACE}_sts.yaml" || true
            # Fetch pod description
            kubectl describe pod $POD_NAME -n $NAMESPACE > "${POD_NAME}_description.txt" || true
            # Fetch last 1-hour logs
            kubectl logs $POD_NAME -n $NAMESPACE --since=1h > "${POD_NAME}_logs.txt" || true
            # Collect redis.conf
            kubectl exec -n $NAMESPACE $POD_NAME -- cat /path/to/redis.conf > "${POD_NAME}_redis.conf" || true
          done < $FILE
        fi
      done
  tags:
    - common-runner
  artifacts:
    paths:
      - "*.yaml"
      - "*.txt"
      - "*.conf"
    when: always
  except:
    - pushes
    - merge_requests
