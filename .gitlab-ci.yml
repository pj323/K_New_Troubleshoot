function k-get-logs() {
    read -p "Enter pod name: " POD_NAME
    echo "Executing first command..."
    winpty kubectl exec -it "$POD_NAME" -- sh -c 'cd ../redis_data && tail -n 500 redis-server.log'
    if [ $? -eq 0 ]; then
        echo "First command executed successfully"
    else
        echo "First command failed"
    fi
    echo "Executing second command..."
    k logs pod/"$POD_NAME" -c redis
    if [ $? -eq 0 ]; then
        echo "Second command executed successfully"
    else
        echo "Second command failed"
    fi
}




stages:
  - search-pod
  - fetch-configmap
  - fetch-sts
  - collect-data

variables:
  INSTANCE_NAME: "your-instance-name"  # Replace with the actual instance name
  CACHE_TEST_NAMESPACE: "cache-test"
  TP2_EDCO_CACHE_TEST_A_NAMESPACE: "tp2-edco-cache-test-a"
  # Add other namespace variables as needed
  KUBECTL: "registry.sfgitlab.opr.statefarm.org/registry/sfcommon/kubectl"  # Replace with your kubectl image

# Stage 1: Search for pods in cache-test namespace
search_pods_cache_test:
  image: $KUBECTL
  stage: search-pod
  script:
    - |
      echo "Searching for pods matching $INSTANCE_NAME in $CACHE_TEST_NAMESPACE namespace"
      kubectl get pods -n $CACHE_TEST_NAMESPACE | grep $INSTANCE_NAME | grep -E 'server-0|server-1|server-2' > found_pods_cache_test.txt || true

      if [[ -s found_pods_cache_test.txt ]]; then
        echo "Pods matching $INSTANCE_NAME found in $CACHE_TEST_NAMESPACE namespace:"
        cat found_pods_cache_test.txt
      else
        echo "No pods matching $INSTANCE_NAME found in $CACHE_TEST_NAMESPACE namespace"
      fi
  tags:
    - cache-utility-test
  artifacts:
    paths:
      - found_pods_cache_test.txt
    when: always
  except:
    - pushes
    - merge_requests

# Stage 1: Search for pods in tp2-edco-cache-test-a namespace
search_pods_tp2_cache_test_a:
  image: $KUBECTL
  stage: search-pod
  script:
    - |
      echo "Searching for pods matching $INSTANCE_NAME in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
      kubectl get pods -n $TP2_EDCO_CACHE_TEST_A_NAMESPACE | grep $INSTANCE_NAME | grep -E 'cache-redis-0' > found_pods_tp2_cache_test_a.txt || true

      if [[ -s found_pods_tp2_cache_test_a.txt ]]; then
        echo "Pods matching $INSTANCE_NAME found in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace:"
        cat found_pods_tp2_cache_test_a.txt
      else
        echo "No pods matching $INSTANCE_NAME found in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
      fi
  tags:
    - tp2-edco-cache-test-a
  artifacts:
    paths:
      - found_pods_tp2_cache_test_a.txt
    when: always
  except:
    - pushes
    - merge_requests

# Stage 2: Fetch ConfigMap for cache-test namespace
fetch_configmap_cache_test:
  image: $KUBECTL
  stage: fetch-configmap
  needs:
    - job: search_pods_cache_test
      artifacts: true
  script:
    - |
      if [[ -s found_pods_cache_test.txt ]]; then
        echo "Fetching ConfigMap for $INSTANCE_NAME in $CACHE_TEST_NAMESPACE namespace"
        CONFIGMAP_NAME=$(kubectl get configmaps -n $CACHE_TEST_NAMESPACE | grep "$INSTANCE_NAME-test-redis-ha-configmap" | awk '{print $1}')

        if [[ ! -z "$CONFIGMAP_NAME" ]]; then
          echo "Found ConfigMap: $CONFIGMAP_NAME"
          # Fetch the entire ConfigMap and extract the redis.conf section until 'logfile'
          kubectl get configmap $CONFIGMAP_NAME -n $CACHE_TEST_NAMESPACE -o yaml > full_configmap_output_cache_test.yaml
          sed -n '/redis\.conf:/,/logfile/p' full_configmap_output_cache_test.yaml > redis_conf_output_cache_test.txt
        else
          echo "No ConfigMap found for $INSTANCE_NAME in $CACHE_TEST_NAMESPACE namespace"
        fi
      else
        echo "No pods found in $CACHE_TEST_NAMESPACE namespace; skipping ConfigMap fetch"
      fi
  tags:
    - cache-utility-test
  artifacts:
    paths:
      - redis_conf_output_cache_test.txt
    when: always
  except:
    - pushes
    - merge_requests

# Stage 2: Fetch ConfigMap for tp2-edco-cache-test-a namespace
fetch_configmap_tp2_cache_test_a:
  image: $KUBECTL
  stage: fetch-configmap
  needs:
    - job: search_pods_tp2_cache_test_a
      artifacts: true
  script:
    - |
      if [[ -s found_pods_tp2_cache_test_a.txt ]]; then
        echo "Fetching ConfigMap for $INSTANCE_NAME in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
        CONFIGMAP_NAME=$(kubectl get configmaps -n $TP2_EDCO_CACHE_TEST_A_NAMESPACE | grep "$INSTANCE_NAME-cache-redis-redis-configmap" | awk '{print $1}')

        if [[ ! -z "$CONFIGMAP_NAME" ]]; then
          echo "Found ConfigMap: $CONFIGMAP_NAME"
          # Fetch the entire ConfigMap and extract the redis.conf section until 'logfile'
          kubectl get configmap $CONFIGMAP_NAME -n $TP2_EDCO_CACHE_TEST_A_NAMESPACE -o yaml > full_configmap_output_tp2_cache_test_a.yaml
          sed -n '/redis\.conf:/,/logfile/p' full_configmap_output_tp2_cache_test_a.yaml > redis_conf_output_tp2_cache_test_a.txt
        else
          echo "No ConfigMap found for $INSTANCE_NAME in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
        fi
      else
        echo "No pods found in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace; skipping ConfigMap fetch"
      fi
  tags:
    - tp2-edco-cache-test-a
  artifacts:
    paths:
      - redis_conf_output_tp2_cache_test_a.txt
    when: always
  except:
    - pushes
    - merge_requests

# Stage 3: Fetch StatefulSet for cache-test namespace
fetch_sts_cache_test:
  image: $KUBECTL
  stage: fetch-sts
  needs:
    - job: fetch_configmap_cache_test
      artifacts: true
  script:
    - |
      if [[ -s found_pods_cache_test.txt ]]; then
        echo "Fetching StatefulSet details for $INSTANCE_NAME in $CACHE_TEST_NAMESPACE namespace"
        STS_NAME=$(kubectl get sts -n $CACHE_TEST_NAMESPACE | grep "$INSTANCE_NAME-test-redis-ha-server" | awk '{print $1}')

        if [[ ! -z "$STS_NAME" ]]; then
          echo "Found StatefulSet: $STS_NAME"
          kubectl get sts $STS_NAME -n $CACHE_TEST_NAMESPACE -o json > sts_output_cache_test.json
          # Parsing the container details using jq
          echo "Parsing the StatefulSet container details"
          jq '{name: .metadata.name, replicas: .spec.replicas, containers: [.spec.template.spec.containers[] | {name: .name, image: .image, resources: .resources}]}' sts_output_cache_test.json > parsed_sts_output_cache_test.json
        else
          echo "No StatefulSet found for $INSTANCE_NAME in $CACHE_TEST_NAMESPACE namespace"
        fi
      else
        echo "No pods found in $CACHE_TEST_NAMESPACE namespace; skipping StatefulSet fetch"
      fi
  tags:
    - cache-utility-test
  artifacts:
    paths:
      - parsed_sts_output_cache_test.json
    when: always
  except:
    - pushes
    - merge_requests

# Stage 3: Fetch StatefulSet for tp2-edco-cache-test-a namespace
fetch_sts_tp2_cache_test_a:
  image: $KUBECTL
  stage: fetch-sts
  needs:
    - job: fetch_configmap_tp2_cache_test_a
      artifacts: true
  script:
    - |
      if [[ -s found_pods_tp2_cache_test_a.txt ]]; then
        echo "Fetching StatefulSet details for $INSTANCE_NAME in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
        STS_NAME=$(kubectl get sts -n $TP2_EDCO_CACHE_TEST_A_NAMESPACE | grep "$INSTANCE_NAME-cache-redis" | awk '{print $1}')

        if [[ ! -z "$STS_NAME" ]]; then
          echo "Found StatefulSet: $STS_NAME"
          kubectl get sts $STS_NAME -n $TP2_EDCO_CACHE_TEST_A_NAMESPACE -o json > sts_output_tp2_cache_test_a.json
          # Parsing the container details using jq
          echo "Parsing the StatefulSet container details"
          jq '{name: .metadata.name, replicas: .spec.replicas, containers: [.spec.template.spec.containers[] | {name: .name, image: .image, resources: .resources}]}' sts_output_tp2_cache_test_a.json > parsed_sts_output_tp2_cache_test_a.json
        else
          echo "No StatefulSet found for $INSTANCE_NAME in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace"
        fi
      else
        echo "No pods found in $TP2_EDCO_CACHE_TEST_A_NAMESPACE namespace; skipping StatefulSet fetch"
      fi
  tags:
    - tp2-edco-cache-test-a
  artifacts:
    paths:
      - parsed_sts_output_tp2_cache_test_a.json
    when: always
  except:
    - pushes
    - merge_requests

# Stage 4: Collect data and produce consolidated output
collect_data:
  image: $KUBECTL
  stage: collect-data
  needs:
    - job: search_pods_cache_test
      artifacts: true
    - job: search_pods_tp2_cache_test_a
      artifacts: true
    - job: fetch_configmap_cache_test
      artifacts: true
    - job: fetch_configmap_tp2_cache_test_a
      artifacts: true
    - job: fetch_sts_cache_test
      artifacts: true
    - job: fetch_sts_tp2_cache_test_a
      artifacts: true
  script:
    - |
      echo "Generating consolidated report..."
      echo "Consolidated Report for $INSTANCE_NAME" > consolidated_report.txt
      echo "=====================================" >> consolidated_report.txt
      echo "" >> consolidated_report.txt

      # Section 1: Pods Found in Namespaces
      echo "Pods Found in Namespaces:" >> consolidated_report.txt
      for FILE in found_pods_*.txt; do
        NAMESPACE=$(echo $FILE | sed 's/found_pods_\(.*\)\.txt/\1/')
        if [[ -s $FILE ]]; then
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  Pods:" >> consolidated_report.txt
          while read -r POD_NAME; do
            echo "    - $POD_NAME" >> consolidated_report.txt
          done < $FILE
        else
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  No pods found matching $INSTANCE_NAME" >> consolidated_report.txt
        fi
        echo "" >> consolidated_report.txt
      done

      # Section 2: ConfigMap Details
      echo "ConfigMap Details:" >> consolidated_report.txt
      for CONFIGMAP_FILE in redis_conf_output_*.txt; do
        NAMESPACE=$(echo $CONFIGMAP_FILE | sed 's/redis_conf_output_\(.*\)\.txt/\1/')
        if [[ -s $CONFIGMAP_FILE ]]; then
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  redis.conf Section:" >> consolidated_report.txt
          cat $CONFIGMAP_FILE >> consolidated_report.txt
        else
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  No redis.conf section found or file is empty" >> consolidated_report.txt
        fi
        echo "" >> consolidated_report.txt
      done

      # Section 3: StatefulSet Details
      echo "StatefulSet Details:" >> consolidated_report.txt
      for STS_FILE in parsed_sts_output_*.json; do
        NAMESPACE=$(echo $STS_FILE | sed 's/parsed_sts_output_\(.*\)\.json/\1/')
        if [[ -s $STS_FILE ]]; then
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  StatefulSet Details:" >> consolidated_report.txt
          cat $STS_FILE | jq '.' >> consolidated_report.txt
        else
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  No StatefulSet found or file is empty" >> consolidated_report.txt
        fi
        echo "" >> consolidated_report.txt
      done

      # Section 4: Pod Descriptions and Logs
      echo "Pod Descriptions and Logs:" >> consolidated_report.txt
      for FILE in found_pods_*.txt; do
        NAMESPACE=$(echo $FILE | sed 's/found_pods_\(.*\)\.txt/\1/')
        if [[ -s $FILE ]]; then
          while read -r POD_NAME; do
            echo "- Pod: $POD_NAME in Namespace: $NAMESPACE" >> consolidated_report.txt
            echo "  Description:" >> consolidated_report.txt
            kubectl describe pod $POD_NAME -n $NAMESPACE >> consolidated_report.txt || echo "Error fetching description for $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
            echo "  Last 1-Hour Logs:" >> consolidated_report.txt
            kubectl logs $POD_NAME -n $NAMESPACE --since=1h >> consolidated_report.txt || echo "Error fetching logs for $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
            echo "  redis.conf Content from Pod:" >> consolidated_report.txt
            kubectl exec -n $NAMESPACE $POD_NAME -- cat /path/to/redis.conf >> consolidated_report.txt || echo "Error fetching redis.conf from $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
          done < $FILE
        fi
      done
  tags:
    - common-runner  # Use an appropriate runner for collecting data
  artifacts:
    paths:
      - consolidated_report.txt
    when: always
  except:
    - pushes
    - merge_requests




    collect_data:
  image: $KUBECTL
  stage: collect-data
  needs:
    - job: search_pods_cache_test
      artifacts: true
    - job: search_pods_tp2_cache_test_a
      artifacts: true
    - job: fetch_configmap_cache_test
      artifacts: true
    - job: fetch_configmap_tp2_cache_test_a
      artifacts: true
  script:
    - |
      echo "Generating consolidated report..."
      echo "Consolidated Report for $INSTANCE_NAME" > consolidated_report.txt
      echo "=====================================" >> consolidated_report.txt
      echo "" >> consolidated_report.txt

      # Section 1: Pods Found in Namespaces
      echo "Pods Found in Namespaces:" >> consolidated_report.txt
      for FILE in found_pods_*.txt; do
        NAMESPACE=$(echo $FILE | sed 's/found_pods_\(.*\)\.txt/\1/')
        if [[ -s $FILE ]]; then
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  Pods:" >> consolidated_report.txt
          while read -r POD_NAME; do
            echo "    - $POD_NAME" >> consolidated_report.txt
          done < $FILE
        else
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  No pods found matching $INSTANCE_NAME" >> consolidated_report.txt
        fi
        echo "" >> consolidated_report.txt
      done

      # Section 2: ConfigMap Details
      echo "ConfigMap Details:" >> consolidated_report.txt
      for CONFIGMAP_FILE in redis_conf_output_*.txt; do
        NAMESPACE=$(echo $CONFIGMAP_FILE | sed 's/redis_conf_output_\(.*\)\.txt/\1/')
        if [[ -s $CONFIGMAP_FILE ]]; then
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  redis.conf Section:" >> consolidated_report.txt
          cat $CONFIGMAP_FILE >> consolidated_report.txt
        else
          echo "- Namespace: $NAMESPACE" >> consolidated_report.txt
          echo "  No redis.conf section found or file is empty" >> consolidated_report.txt
        fi
        echo "" >> consolidated_report.txt
      done

      # Section 3: Pod Descriptions and Logs
      echo "Pod Descriptions and Logs:" >> consolidated_report.txt
      for FILE in found_pods_*.txt; do
        NAMESPACE=$(echo $FILE | sed 's/found_pods_\(.*\)\.txt/\1/')
        if [[ -s $FILE ]]; then
          while read -r POD_NAME; do
            echo "- Pod: $POD_NAME in Namespace: $NAMESPACE" >> consolidated_report.txt
            echo "  Description:" >> consolidated_report.txt
            kubectl describe pod $POD_NAME -n $NAMESPACE >> consolidated_report.txt || echo "Error fetching description for $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
            echo "  Last 1-Hour Logs:" >> consolidated_report.txt
            kubectl logs $POD_NAME -n $NAMESPACE --since=1h >> consolidated_report.txt || echo "Error fetching logs for $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
            echo "  redis.conf Content from Pod:" >> consolidated_report.txt
            kubectl exec -n $NAMESPACE $POD_NAME -- cat /path/to/redis.conf >> consolidated_report.txt || echo "Error fetching redis.conf from $POD_NAME" >> consolidated_report.txt
            echo "" >> consolidated_report.txt
          done < $FILE
        fi
      done
  tags:
    - common-runner  # Use an appropriate runner for collecting data
  artifacts:
    paths:
      - consolidated_report.txt
    when: always
  except:
    - pushes
    - merge_requests


tage: ping-instances
image: $NETSTER
dependencies:
  - dns_lookup_cache_test
script: |
    DNSNAME="$(cat DNSNAMESORTED.txt)"
    for item in $DNSNAME; do
      OUTPUT=$( (echo -en "PING\r\n"; sleep 1) | nc -q 1 -v $item 6379 2>&1 )
      if echo "$OUTPUT" | grep -q "+PONG"; then
        echo "$item ping result: +PONG"
      elif echo "$OUTPUT" | grep -q "open"; then
        echo "$item ping result: port open"
      elif echo "$OUTPUT" | grep -q "Connection refused"; then
        echo "$item ping result: Connection refused"
      else
        echo "$item ping result: Connection failed"
      fi
    done
tags:
  - cache-utility-test
except:
  - pushes
  - merge_requests

    the newer releases (like 6.2.12) include several bug fixes and optimizations that could improve your setup's stability, such as better memory management, Lua script garbage collection fixes, and race condition resolutions​(
Redis
)​(
GitHub
). Additionally, Redis 6.2.14 includes fixes for crashes related to memory overflows and various other stability improvements​
https://redis.io/docs/latest/operate/rs/release-notes/rs-6-2-12/
